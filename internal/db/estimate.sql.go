// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: estimate.sql

package db

import (
	"context"
	"database/sql"
)

const createEstimate = `-- name: CreateEstimate :one
INSERT INTO estimates (product_name, price, longitude, latitude)
VALUES ($1, $2, $3, $4)
RETURNING id, product_name, price, longitude, latitude
`

type CreateEstimateParams struct {
	ProductName string         `json:"product_name"`
	Price       float64         `json:"price"`
	Longitude   string `json:"longitude"`
	Latitude    string `json:"latitude"`
}

func (q *Queries) CreateEstimate(ctx context.Context, arg CreateEstimateParams) (Estimate, error) {
	row := q.db.QueryRowContext(ctx, createEstimate,
		arg.ProductName,
		arg.Price,
		arg.Longitude,
		arg.Latitude,
	)
	var i Estimate
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Price,
		&i.Longitude,
		&i.Latitude,
	)

	return i, err
}

const deleteEstimate = `-- name: DeleteEstimate :exec
DELETE FROM estimates
WHERE id = $1
`

func (q *Queries) DeleteEstimate(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEstimate, id)
	return err
}

const getEstimateByID = `-- name: GetEstimateByID :one
SELECT id, product_name, price, longitude, latitude
FROM estimates
WHERE id = $1
`

func (q *Queries) GetEstimateByID(ctx context.Context, id int32) (Estimate, error) {
	row := q.db.QueryRowContext(ctx, getEstimateByID, id)
	var i Estimate
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Price,
		&i.Longitude,
		&i.Latitude,
	)
	return i, err
}

const getEstimatesWithPagination = `-- name: GetEstimatesWithPagination :many
SELECT id, product_name, price, longitude, latitude
FROM estimates
ORDER BY id
LIMIT $1 OFFSET $2
`

func (q *Queries) GetEstimatesWithPagination(ctx context.Context, arg GetEstimatesWithPaginationParams) ([]Estimate, error) {
	rows, err := q.db.QueryContext(ctx, getEstimatesWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Estimate
	for rows.Next() {
		var i Estimate
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Price,
			&i.Longitude,
			&i.Latitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEstimate = `-- name: UpdateEstimate :one
UPDATE estimates
SET product_name = $2, price = $3, longitude = $4, latitude = $5
WHERE id = $1
RETURNING id, product_name, price, longitude, latitude
`

type UpdateEstimateParams struct {
	ID          int32          `json:"id"`
	ProductName string         `json:"product_name"`
	Price       string         `json:"price"`
	Longitude   sql.NullString `json:"longitude"`
	Latitude    sql.NullString `json:"latitude"`
}

func (q *Queries) UpdateEstimate(ctx context.Context, arg UpdateEstimateParams) (Estimate, error) {
	row := q.db.QueryRowContext(ctx, updateEstimate,
		arg.ID,
		arg.ProductName,
		arg.Price,
		arg.Longitude,
		arg.Latitude,
	)
	var i Estimate
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Price,
		&i.Longitude,
		&i.Latitude,
	)
	return i, err
}
